plugins {
  id "org.sonarqube" version "2.4"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.4'
    compile group: 'uk.com.robust-it', name: 'cloning', version: '1.9.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.+'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
             srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'it.polimi.ingsw'
            artifactId 'GC_32'
            version '0.9.8'

            from components.java
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
        events "failed"
    }
}

jar {
    include ''
}

task clientJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'it/polimi/ingsw/GC_32/Client/**/*.class'
        include 'it/polimi/ingsw/GC_32/Common/**/*.class'
    }
    from(sourceSets.main.resources){
        include '**/*'
    }
    baseName 'limg_client'
    manifest {
        attributes(
            'Implementation-Title': project.name + '_client',
            'Main-Class': 'it.polimi.ingsw.GC_32.Client.Controller.MainClient'
        )
    }
    from { 
        configurations.compile.collect { 
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
tasks.jar.dependsOn(clientJar)

task serverJar(type: Jar) {  
    from(sourceSets.main.output) {
        include 'it/polimi/ingsw/GC_32/Server/**/*.class'
        include 'it/polimi/ingsw/GC_32/Common/**/*.class'
    }
    from(sourceSets.main.resources){
        include '*'
    }
    baseName 'limg_server'
    manifest {
        attributes(
            'Implementation-Title': project.name + '_server',
            'Main-Class': 'it.polimi.ingsw.GC_32.Server.Main'
        )
    }
    from { 
        configurations.compile.collect { 
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
tasks.jar.dependsOn(serverJar)

task convertCards {
    doLast {
        exec {
            executable 'python3'
            args 'utils/card_converter.py', 'raw_resources/cards.csv', 'src/main/resources/cards.json'
        }
        exec {
            executable 'python3'
            args 'utils/card_converter.py', 'raw_resources/excom_cards.csv', 'src/main/resources/excom_cards.json'
        }
        exec {
            executable 'python3'
            args 'utils/card_converter.py', 'raw_resources/leader_cards.csv', 'src/main/resources/leader_cards.json'
        }
    }
    description = "Convert the cards from csv to json format"
}
tasks.processResources.dependsOn(convertCards)

description = 'Prova Finale Ingegneria del software'
