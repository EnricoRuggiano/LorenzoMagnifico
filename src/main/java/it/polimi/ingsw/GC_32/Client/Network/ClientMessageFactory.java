package it.polimi.ingsw.GC_32.Client.Network;

import com.eclipsesource.json.JsonArray;
import com.eclipsesource.json.JsonObject;

/**
 * this class allows to simply generate all the messages used on the client side of the game in their JSON format. ClientMessageFactory offers a multitude of different
 * static method which returns a String suitable to be send.
 * 
 * For more details on the network protocol see the wiki.
 *
 */

public class ClientMessageFactory {

	/**
	 * allows to generate a CHGNAME message
	 * 
	 * @param playerUUID the UUID of the player who wants send the message
	 * @param name the player name which will be show during the game
	 * @return the string which will be sent
	 */
	public static String buildCHGNAMEmessage(String playerUUID, String name){
		JsonObject CHGNAME = new JsonObject();
		JsonObject CHGNAMEPayload = new JsonObject();
		CHGNAME.add("MESSAGETYPE", "CHGNAME");
		CHGNAMEPayload.add("NAME", name);
		CHGNAMEPayload.add("PLAYERID", playerUUID);
		CHGNAME.add("PAYLOAD", CHGNAMEPayload);
		return CHGNAME.toString();
	}
	
	/**
	 * allows to generate a MSG message
	 * 
	 * @param playerUUID the UUID of the player who wants send the message
	 * @param message the message which will be sent to the receiver
	 * @param destination the receiver of this message
	 * @param allFlag if settet true, the message will be show to all the player connected to the game
	 * @return the string which will be sent
	 */
	public static String buildMSGmessage(String playerUUID, String message, String destination, boolean allFlag){
		JsonObject MSG = new JsonObject();
		JsonObject MSGPayload = new JsonObject();
		MSG.add("MESSAGETYPE", "MSG");
		MSGPayload.add("FLAG", allFlag);
		MSGPayload.add("RECEIVER", destination);
		MSGPayload.add("SENDER", playerUUID);
		MSGPayload.add("MESSAGE", message);
		MSG.add("PAYLOAD", MSGPayload);
		return MSG.toString();
	}
	
	/**
	 * allows to generate a ASKACT message
	 * @param actionType the type of action performed
	 * @param pawnID the ID of the moved family member
	 * @param regionID the region ID where the action has been performed
	 * @param spaceID the space ID of the specified region ID where the pawn has been moved
	 * @param indexCost additional info, which indicates what card's cost the player has choosen to pay. If the card has a single cost this field is setted to 0
	 * @param cardName additional info, which indicates the name of the taken card. If no card has been taken this field is setted null
	 * @return the string which will be sent
	 */
	public static String buildASKACTmessage(String actionType, int pawnID, int regionID, int spaceID, int indexCost, String cardName){
		JsonObject ASKACT = new JsonObject();
		JsonObject ASKACTpayload = new JsonObject();
		ASKACTpayload.add("ACTIONTYPE", actionType);
		ASKACTpayload.add("FAMILYMEMBER_ID", pawnID);
		ASKACTpayload.add("REGIONID", regionID);
		ASKACTpayload.add("SPACEID", spaceID);
		ASKACTpayload.add("COSTINDEX", indexCost);
		ASKACTpayload.add("CARDNAME", cardName==null ? "" : cardName);
		ASKACT.add("MESSAGETYPE", "ASKACT");
		ASKACT.add("PAYLOAD", ASKACTpayload);
		return ASKACT.toString();
	}
	
	/**
	 * allows to generate a ASKACT message, when it must be generated by a bonus action
	 * @param actionType the type of action performed
	 * @param regionID the region ID where the action has been performed
	 * @param spaceID the space ID of the specified region ID where the pawn has been moved
	 * @param payload additional info used to complete the action definition
	 * @return the string which will be sent
	 */
	public static String buildASKACTmessage(String actionType, int regionID, int spaceID, JsonObject payload){
		JsonObject ASKACT = new JsonObject();
		JsonObject ASKACTpayload = new JsonObject();
		ASKACTpayload.add("ACTIONTYPE", actionType);
		ASKACTpayload.add("REGIONID", regionID);
		ASKACTpayload.add("SPACEID", spaceID);
		ASKACTpayload.add("JSONPAYLOAD", payload);
		ASKACT.add("MESSAGETYPE", "ASKACT");
		ASKACT.add("PAYLOAD", ASKACTpayload);
		return ASKACT.toString();
	}
	
	/**
	 * allows to generate a ASKLDRACT message
	 * @param gameUUID the game UUID
	 * @param leader the choosen leader card
	 * @param decision string representing the type of leader action performed
	 * @return the string which will be sent
	 */
	public static String buildASKLDRACTmessage(String gameUUID, String leader, String decision){
		JsonObject ASKLDRACT = new JsonObject();
		JsonObject ASKLDRACTpayload = new JsonObject();
		ASKLDRACT.add("MESSAGETYPE", "ASKLDRACT");
		ASKLDRACTpayload.add("LEADERCARD", leader); 
		ASKLDRACTpayload.add("DECISION", decision); 
		ASKLDRACT.add("PAYLOAD", ASKLDRACTpayload);
		ASKLDRACT.add("GameID", gameUUID);
		return ASKLDRACT.toString();
	}
	
	/**
	 * allows to generate a LDRSET message, this message is used only during the start leader card distribution phase
	 * @param gameUUID the game UUID
	 * @param leader the choosen leader card
	 * @param cardList a JsonArray containing the list of remaining leader card
	 * @return the string which will be sent
	 */
	public static String buildLDRSETmessage(String gameUUID, String playerUUID, JsonArray cardList){
		JsonObject LDRSET = new JsonObject();
		JsonObject LDRSETPayload = new JsonObject();
		LDRSETPayload.add("LIST", cardList);
		LDRSETPayload.add("PLAYERID", playerUUID);
		LDRSET.add("MESSAGETYPE", "LDRSET");
		LDRSET.add("PAYLOAD", LDRSETPayload);
		LDRSET.add("GameID", gameUUID);
		return LDRSET.toString();
	}
	
	/**
	 * allows to generate a LDRSET message, this message is used only during the start leader card distribution phase
	 * @param gameUUID the game UUID
	 * @param name the UUID of the player which has ended his turn
	 * @return the string which will be sent
	 */
	public static String buildTRNENDmessage(String gameUUID, String name){
		JsonObject TRNEND = new JsonObject();
		JsonObject TRNENDPayload = new JsonObject();
		TRNEND.add("MESSAGETYPE", "TRNEND");
		TRNENDPayload.add("NAME", name);
		TRNEND.add("PAYLOAD", TRNENDPayload);
		TRNEND.add("GameID", gameUUID);
		return TRNEND.toString();
	}
	
	/**
	 * allows to generate a SENDPOPE message, this message is used only during the excommunication phase to communicate the client decision
	 * @param gameUUID the game UUID
	 * @param name the UUID of the player 
	 * @param answer a boolen flag representing the client decision (true if client has decided to show his faith, false otherwise)
	 * @param faith the faith points of the player
	 * @return the string which will be sent
	 */
	public static String buldSENDPOPEmessage(String gameUUID, String name, boolean answer, int faith){
		JsonObject SENDPOPE = new JsonObject();
		JsonObject SENDPOPEPayload = new JsonObject();
		SENDPOPEPayload.add("ANSWER", answer);
		SENDPOPEPayload.add("FAITH_NEEDED", faith);
		SENDPOPEPayload.add("PLAYERID", name);
		SENDPOPE.add("MESSAGETYPE", "SENDPOPE");
		SENDPOPE.add("PAYLOAD", SENDPOPEPayload);
		SENDPOPE.add("GameID", gameUUID);
		return SENDPOPE.toString();
	}
}
