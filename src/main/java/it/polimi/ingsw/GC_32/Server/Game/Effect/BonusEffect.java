package it.polimi.ingsw.GC_32.Server.Game.Effect;

import java.util.function.BiFunction;
import java.util.function.Function;

import com.eclipsesource.json.JsonValue;

import it.polimi.ingsw.GC_32.Server.Game.*;
import it.polimi.ingsw.GC_32.Server.Game.Board.Board;


/**
 * BonusEffect is kind of EffectBuilder which generate an effect of type BONUS (this kind of effect increse of X the quantity of a given resource for each Y resource
 * or card (of a specific type) owned by a player. Every Effect which are a BONUS-type effect must be generated by the BonusEffect builder referencing to it with the
 * BONUS opcode
 * @author alessandro
 *
 */
public class BonusEffect {
	
	/**
	 * builder used to generate BONUS type effects. ActionEffectBuilder are loaded into the EffectRegistry under the flag "BONUS"
	 * 
	 * @param JsonValue representing the effect 
	 * @return the effect obtained by the payload passed as argument
	 */
	static EffectBuilder bonusEffectBuilder = (JsonValue payload) -> {
		JsonValue type = payload.asObject().get("TYPE");
		JsonValue forEach = payload.asObject().get("FOREACH");
		JsonValue quantity = payload.asObject().get("QUANTITY");
		JsonValue increase = payload.asObject().get("INCREASE");
		JsonValue increasingQuantity = payload.asObject().get("INCREASINGQUANTITY");
		
		BiFunction<Boolean,Player, Function<Player,Integer>> typeEffect = (typeCheck,p) -> {
			if(typeCheck) return player -> ((Player) player).getPersonalBoard().getCardsOfType(forEach.asString()).size()/quantity.asInt();
			return player -> ((Player) player).getResources().getResource(forEach.asString())/quantity.asInt();
		};
	
		Effect bonusEffect = (Board b, Player p, Action a, ContextManager cm) -> {
			Function<Player,Integer> howManyTimes = typeEffect.apply(type.asString().equals("CARD"),p);
			p.getResources().addResource(increase.asString(), increasingQuantity.asInt()*howManyTimes.apply(p));
		};
		return bonusEffect;		
	};	

	/**
	 * load the builder into the EffectRegistry with flag "BONUS"
	 */
	public static void loadBuilder() {
		EffectRegistry.getInstance().registerBuilder("BONUS", bonusEffectBuilder);
	}	
}
